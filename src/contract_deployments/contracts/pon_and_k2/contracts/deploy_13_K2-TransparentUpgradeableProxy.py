from web3 import Web3
from web3.middleware import construct_sign_and_send_raw_middleware
import os
import time
import logging

# Account Alias: PON
ACCOUNT_ALIAS = "PON"

# TransparentUpgradeableProxy contract bytecode
BYTE_CODE = ""

logging.basicConfig(filename="/tmp/K2_TransparentUpgradeableProxy_deployment.log",
                    filemode='a',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.INFO)

def deploy_K2_TransparentUpgradeableProxy() -> (bool, dict):
    
    result = {
        "transaction": {},
        "receipt": {},
        "additional_info": {
            "contract_address": "" # Only populates if the contract was deployed successfully
        }
    }
    
    el_uri = os.getenv("EL_RPC_URI", 'http://0.0.0.0:53913')
    sender = get_sender()
    receiver = "0x0000000000000000000000000000000000000000"
    w3 = Web3(Web3.HTTPProvider(el_uri))
    # sleep for 10s before checking again
    time.sleep(10)
    
    # Check if the chain has started before submitting transactions
    block = w3.eth.get_block('latest')
    
    logging.info(f"Latest block number: {block.number}")
    if block.number > 1:
        logging.info("Chain has started, proceeding with PoN-TransparentUpgradeableProxy deployment")
        sender_account = w3.eth.account.from_key(sender)
        
        w3.middleware_onion.add(construct_sign_and_send_raw_middleware(sender_account))
        
        logging.info("Preparing PoN-TransparentUpgradeableProxy deployment tx")
        transaction = {
            "from": sender_account.address,
            "to": receiver,
            "value": 0,
            "gasPrice": w3.eth.gas_price,
            'nonce': w3.eth.get_transaction_count(sender_account.address),
            "data": BYTE_CODE
        }
        
        logging.info("Estimating gas")
        estimated_gas = w3.eth.estimate_gas(transaction)
        transaction["gas"] = estimated_gas
        
        logging.info("Sending PoN-TransparentUpgradeableProxy deployment tx")
        logging.debug(f"Sending deployment tx: {transaction}")
        tx_hash = w3.eth.send_transaction(transaction)
        
        time.sleep(10)
        TransparentUpgradeableProxy_tx = w3.eth.get_transaction(tx_hash)
        TransparentUpgradeableProxy_receipt = w3.eth.get_transaction_receipt(tx_hash)
        
        logging.info(f"PoN-TransparentUpgradeableProxy deployment tx: {TransparentUpgradeableProxy_tx}")
        logging.info(f"PoN-TransparentUpgradeableProxy deployment receipt: {TransparentUpgradeableProxy_receipt}")
        
        if TransparentUpgradeableProxy_receipt['status'] == 1:
            logging.info("PoN-TransparentUpgradeableProxy deployment successful")
            result["transaction"] = TransparentUpgradeableProxy_tx
            result["receipt"] = TransparentUpgradeableProxy_receipt
            result["additional_info"]["contract_address"] = TransparentUpgradeableProxy_receipt["contractAddress"]
            return True, result
        else:
            logging.info("PoN-TransparentUpgradeableProxy deployment failed")
            return False, result
        
    else:
        logging.info("Chain has not started, restarting deployment")
        return False, {}

def get_sender() -> str:
    # Extract the right private key from the list of private keys
    private_keys = os.getenv("PRIVATE_KEYS", ACCOUNT_ALIAS+":ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80")
    private_keys.split(";")
    sender = ""
    for key in private_keys:
        if key.split(":")[0] == ACCOUNT_ALIAS:
            sender_keys = key.split(":")[1].split(",")
            sender = sender_keys[0]
            break
    return sender

def run_till_deployed() -> dict:
    deployment_status = False
    deployment_details = {}
    while deployment_status is False:
        try:
          deployment_status, deployment_details = deploy_K2_TransparentUpgradeableProxy()
        except Exception as e:
          logging.error(e)
          logging.error("restarting deployment as previous one failed")
    
    return deployment_details


if __name__ == "__main__":
    
    logging.info("PoN-TransparentUpgradeableProxy deployment started")
    deployment_details = run_till_deployed()
    logging.info("PoN-TransparentUpgradeableProxy deployment finished")
    
    print(deployment_details)
